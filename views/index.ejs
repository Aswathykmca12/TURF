<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Home - Online Turf Booking System</title>
  
  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:300,400,600,700|Nunito:300,400,600,700|Poppins:300,400,500,600,700" rel="stylesheet">

  <!-- Vendor CSS Files -->
  <link href="assets/vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
  <link href="assets/vendor/bootstrap-icons/bootstrap-icons.css" rel="stylesheet">
  <link href="assets/vendor/boxicons/css/boxicons.min.css" rel="stylesheet">
  <link href="assets/vendor/quill/quill.snow.css" rel="stylesheet">
  <link href="assets/vendor/quill/quill.bubble.css" rel="stylesheet">
  <link href="assets/vendor/remixicon/remixicon.css" rel="stylesheet">
  <link href="assets/vendor/simple-datatables/style.css" rel="stylesheet">

  <!-- Main CSS File -->
  <link rel="stylesheet" href="assets/css/index.css">


</head>
<body>

  <header>
    <nav>
      <ul class="nav justify-content-end p-3">

        <% if (userActive === false) { %>
          
          <li class="nav-item">
            <a href="/user/login" class="btn btn-primary mx-1">Sign In</a>
          </li>
        <% } else { %>

          <li class="nav-item">
            <a href="/user/dashboard" class="btn btn-outline-primary mx-1"><%= data.name %></a>
          </li>
        <% } %>
        <li class="nav-item">
          <a href="/user/register" class="btn btn-secondary mx-1">Create User Account</a>
        </li>
      </ul>
    </nav>
  </header>

  <main>
    <section class="container text-center my-5">
      <h1>Online Sports Turf Booking System</h1>
      <p>Find and book sports turfs easily at your preferred location. Check availability, weather conditions, and book your slot!</p>
      
      <h3 class="my-4">Search for Turf</h3>

      <form id="searchForm">
          <div class="input-group mb-4">
              <input type="text" id="placeInput" class="form-control" name="place" placeholder="Enter Place/Location" aria-label="Place/Location" required>
              <button class="btn btn-success" type="submit">Search</button>
          </div>
      </form>

      <table class="table table-bordered table-hover mt-5">
        <thead>
          <tr>
            <th scope="col">#</th>
            <th scope="col">Turf Name</th>
            <th scope="col">Location</th>
            <th scope="col">Weather</th>
            <th scope="col">Facilities</th>
            <th scope="col">Price (Hr)</th>
            <th scope="col">Book</th>
          </tr>
        </thead>
        <tbody id="turfTableBody">
          <!-- Rows will be populated dynamically here -->
        </tbody>
      </table>

    </section>
  </main>

  <footer class="footer bg-light text-center py-3">
    <div class="container">
      <span>&copy;<strong></strong></span>
    </div>
  </footer>

  <!-- Vendor JS Files -->
  <script src="assets/vendor/apexcharts/apexcharts.min.js"></script>
  <script src="assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="assets/vendor/chart.js/chart.umd.js"></script>
  <script src="assets/vendor/echarts/echarts.min.js"></script>
  <script src="assets/vendor/quill/quill.min.js"></script>
  <script src="assets/vendor/simple-datatables/simple-datatables.js"></script>
  <script src="assets/vendor/tinymce/tinymce.min.js"></script>
  <script src="assets/vendor/php-email-form/validate.js"></script>

  <!-- Main JS File -->
  <script src="assets/js/main.js"></script>

  

  <script>
    const apikey = "193b2ecc88818699b736c69aa1eaf873";
    
    document.getElementById("searchForm").addEventListener("submit", async function (event) {
        event.preventDefault();
        
        const place = document.getElementById("placeInput").value;
        
        try {
            // Fetch turf data
            const response = await fetch(`/search-turf?place=${encodeURIComponent(place)}`);
            const turfs = await response.json();
            console.log(turfs);

            const tbody = document.getElementById("turfTableBody");
            tbody.innerHTML = ""; // Clear previous results

            const today = new Date().toISOString().split('T')[0]; // Format today's date as YYYY-MM-DD

            for (let index = 0; index < turfs.length; index++) {
                const turf = turfs[index];
                
                // Fetch weather data
                const weatherResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(turf.place)}&appid=${apikey}&units=metric`);
                const weatherData = await weatherResponse.json();
                
                let weatherInfo = '';
                if (weatherData.cod === 200) {
                    const weatherDescription = weatherData.weather[0].description;
                    const temperature = weatherData.main.temp;
                    const weatherEmoji = getWeatherEmoji(weatherDescription);
                    weatherInfo = `${weatherEmoji} ${weatherDescription} | ${temperature}¬∞C`;
                } else {
                    weatherInfo = 'Weather data not available';
                }

                // Filter turfSchedules where isPaid is false and createdAt is today
                const filteredSchedules = turf.turfSchedules.filter(schedule => 
                    !schedule.isPaid && schedule.createdAt.startsWith(today)
                );

                `<% if (userActive === true) {  %>`
                    // Map each schedule to a button link if it meets the criteria
                    const scheduleLinks = filteredSchedules.length > 0 
                        ? filteredSchedules.map(schedule => 
                            `<a href="/bookschedule/${turf.id}/${schedule.id}/<%= data.id %>" class="btn btn-outline-danger btn-sm me-1">${schedule.scheduleTime}</a>`
                          ).join('') // Join buttons without separator
                        : '<span>No Available Schedules</span>'; // Show a message if there are no matching schedules
                `<% } %>`
                
                const row = document.createElement("tr");
                
                row.innerHTML = `
                    <td>${index + 1}</td> <!-- Use the index here -->
                    <td>${turf.name}</td>
                    <td>${turf.place}</td>
                    <td>
                      <b>${weatherInfo}</b>
                    </td> <!-- Weather Info -->
                    <td>${turf.facilities}</td>
                    <td>${turf.amount} / Hr</td>

                    <% if (userActive === false) { %>
                      <td>
                        <h6 class="text-danger">Please Login to book</h6>
                      </td>
                    <% } else { %>
                      <td>
                        ${scheduleLinks} 
                      </td>
                    <% } %>
                `;
                
                tbody.appendChild(row);
            }
        } catch (error) {
            console.error("Error fetching turf details:", error);
        }
    });

    function getWeatherEmoji(description) {
        const weatherEmojis = {
            clear: '‚òÄÔ∏è', // Clear sky
            few: 'üå§Ô∏è', // Few clouds
            scattered: 'üå•Ô∏è', // Scattered clouds
            broken: '‚òÅÔ∏è', // Broken clouds
            rain: 'üåßÔ∏è', // Rain
            thunderstorm: '‚õàÔ∏è', // Thunderstorm
            snow: '‚ùÑÔ∏è', // Snow
            mist: 'üå´Ô∏è' // Mist
        };

        // Return the corresponding emoji based on the description
        if (description.includes('clear')) return weatherEmojis.clear;
        if (description.includes('few')) return weatherEmojis.few;
        if (description.includes('scattered')) return weatherEmojis.scattered;
        if (description.includes('broken')) return weatherEmojis.broken;
        if (description.includes('rain')) return weatherEmojis.rain;
        if (description.includes('thunderstorm')) return weatherEmojis.thunderstorm;
        if (description.includes('snow')) return weatherEmojis.snow;
        if (description.includes('mist')) return weatherEmojis.mist;

        return 'üåà'; // Default emoji if not matched
    }
</script>





</body>
</html>
